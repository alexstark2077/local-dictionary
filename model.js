"use strict";class App{#t=JSON.parse(localStorage.getItem("myDictionary"))||[];#i;#e;#o={viewChoice:localStorage.getItem("myDictionaryState")?JSON.parse(localStorage.getItem("myDictionaryState")).viewChoice:"rows"};getDict(){return this.#t}saveLocally(){localStorage.setItem("myDictionary",JSON.stringify(this.#t))}saveStateLocally(){localStorage.setItem("myDictionaryState",JSON.stringify(this.#o))}pushEntry(t){const[i,e,o,n,s]=t,a={example:i,meaning:e,synonyms:o,word:n,tags:s,id:(new Date).getTime()};this.#t.push(a),this.saveLocally()}editEntry(t){const[i,e,o,n,s]=t,a=this.#t[this.#i];a.example=i,a.meaning=e,a.synonyms=o,a.word=n,a.tags=s,this.saveLocally()}async exportAll(){try{const t=JSON.stringify(this.getDict());console.log("============="),console.log(t),console.log("============="),await navigator.clipboard.writeText(t),alert("All your data was copied to the clipboard and printed to the console as a JSON string.")}catch(t){throw console.log(t),t}}getOriginalIndex(t){const i=this.#t.findIndex((i=>i.id===t));return this.#i=i,i}getOriginalIndexByWord(t){const i=this.#t.findIndex((i=>i.word===t));return this.#e=i,i}findEntry(t,i){return"word"===i?this.#t.find((i=>i.word===t)):"id"===i?(console.log(this.#t.find((i=>i.id===+t))),this.#t.find((i=>i.id===+t))):void 0}changeViewChoice(t){"rows"!==t&&"grid"!==t&&"two-columns"!==t||(this.#o.viewChoice=t)}getState(){return this.#o}getOnlyWords(){return this.getDict().map((t=>t.word))}}